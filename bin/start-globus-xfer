#!/usr/bin/env bash
# start-globus-xfer

# NERSC: load the module with Globus CLI tools
module load globus-tools

# ensure we're logged in to Globus
if ! globus whoami > /dev/null 2>&1; then
    echo "Error: Not logged in to Globus."
    echo "Use 'module load globus-tools' followed by 'globus login' to generate a globus token."
    exit 1
fi

# application configuration (Production)
# export TACC_SYNC_DATA_ROOT=${TACC_SYNC_DATA_ROOT:="${CFS}/icecubed/tacc-sync"}
# export TACC_SYNC_ROOT=${TACC_SYNC_ROOT:="${HOME}/tacc-sync"}
# export TACC_SYNC_WORK_ROOT=${TACC_SYNC_WORK_ROOT:="${HOME}/tacc-sync/work"}

# application configuration (Development)
export TACC_SYNC_DATA_ROOT=${TACC_SYNC_DATA_ROOT:="/tmp/tacc/data"}
export TACC_SYNC_ROOT=${TACC_SYNC_ROOT:="${HOME}/github/tacc-sync"}
export TACC_SYNC_WORK_ROOT=${TACC_SYNC_WORK_ROOT:="/tmp/tacc/work"}

# transfer configuration
export GLOBUS_DEST_ENDPOINT=${GLOBUS_DEST_ENDPOINT:="e6d7586e-c815-4f11-9a90-37d1747989c1"}  # TACC Ranch GCS v5.4 Tape Archival
export GLOBUS_SOURCE_ENDPOINT=${GLOBUS_SOURCE_ENDPOINT:="9d6d994a-6d04-11e5-ba46-22000b92c6ec"}  # NERSC DTN
export HPSS_BASE_PATH=${HPSS_BASE_PATH:="/home/projects/icecube"}
export TACC_BASE_PATH=${TACC_BASE_PATH:="/stornext/ranch_01/ranch/projects/TG-PHY150040"}

# component configuration
export INBOX_DIR=${INBOX_DIR:="${TACC_SYNC_WORK_ROOT}/globus_queue"}
export LOG_PATH=${LOG_PATH:="${TACC_SYNC_WORK_ROOT}/log/globus_xfer.log"}
export OUTBOX_DIR=${OUTBOX_DIR:="${TACC_SYNC_WORK_ROOT}/reaper_queue"}
export PID_PATH=${PID_PATH:="${TACC_SYNC_WORK_ROOT}/semaphore/globus_xfer.pid"}
export QUARANTINE_DIR=${QUARANTINE_DIR:="${TACC_SYNC_WORK_ROOT}/quarantine/globus_xfer"}
export RUN_ONCE_AND_DIE=${RUN_ONCE_AND_DIE:="TRUE"}
export RUST_LOG=${RUST_LOG:="trace"}
export SEMAPHORE_DIR=${SEMAPHORE_DIR:="${TACC_SYNC_WORK_ROOT}/semaphore"}
export TRANSFER_DIR=${TRANSFER_DIR:="${TACC_SYNC_DATA_ROOT}"}
export WORK_SLEEP_SECONDS=${WORK_SLEEP_SECONDS:="3600"}  # 1 hour

# if we've already got a .pid file, then bail out
if [[ -f $PID_PATH ]]; then
    echo "GlobusXfer component is already running: $PID_PATH"
    echo "kill -9 $(<$PID_PATH)"
    exit 1
fi

# start the GlobusXfer component
echo "Starting GlobusXfer component"
${TACC_SYNC_ROOT}/target/release/globus_xfer 2>>${LOG_PATH} &

# capture the process ID of the component
echo $! >$PID_PATH
